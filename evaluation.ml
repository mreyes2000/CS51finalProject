(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = [] ;;

    let close (exp : expr) (env : env) : value =
      Closure(exp, env) ;;

    let lookup (env : env) (v : varid) : value =
      match List.filter (fun elt -> fst elt = v) env with
      | [] -> raise (EvalError ("Variable " ^ v ^ " not found in environment"))
      | hd :: _ -> !(snd hd) ;;

    (* If the environment does not have the varid v, it creates it
       and maps it to newval. If it already exists, it replaces its
       current value with newval *)
    let extend (env : env) (v : varid) (newval : value ref) : env =
      if List.filter (fun elt -> fst elt = v) env = [] 
      then (v, newval) :: env 
      else let change_val (var, oldval) = 
             if var = v then (var, newval) else (var, oldval) in 
           List.map change_val env ;;

    (* Defined as such because they recur each other. Both are used to 
       print the value and the environment for the dynamic semantics *)
    let rec value_to_string ?(printenvp : bool = true) (value : value) : string =
      match value with
      | Val exp -> exp_to_concrete_string exp
      | Closure(exp, env) -> match exp with
                             | Num _ | Bool _ 
                             | Var _ -> exp_to_concrete_string exp
                             | _ -> if printenvp 
                                    then exp_to_concrete_string exp 
                                         ^ " where " ^ env_to_string env 
                                    else exp_to_concrete_string exp

    and env_to_string (env : env) : string =
      let stringify (v, vl) = v ^ " |-> " ^ value_to_string !vl in
      "[" ^ String.concat "; " (List.map stringify env) ^ "]" ;;
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an enviornment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(*GLOBAL HELPER FUNCTIONS*)

(* Extracts the expression from the value *)
let extract_value (val_e : Env.value) : expr = 
  match val_e with
  | Val v -> v
  | Closure(v, _) -> v ;;

(* The following two functions extract the integer and booleans 
   from an expression, respectively. If the expression does not 
   evaluate to an integer or boolean, it raises an exception *)
let extract_num (exp : expr) : int = 
  match exp with
  | Num i -> i
  | _ -> raise (EvalError ("The expression " ^ exp_to_concrete_string exp 
                          ^ " does not evaluate to an int")) ;;

let extract_bool (exp : expr) : bool = 
  match exp with
  | Bool b -> b
  | _ -> raise (EvalError ("The expression " ^ exp_to_concrete_string exp  
                          ^ " does not evaluate to a bool")) ;;

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

let eval_s (exp : expr) (_env : Env.env) : Env.value =
  
  (* Inner helper function to avoid passing an environment
     and extracting expressions from values *)
  let rec evaluator (ev_exp : expr) : expr =
    let num_extractor subexp = extract_num (evaluator subexp) in
    match ev_exp with
    | Var v -> raise (EvalError ("Unbound variable " ^ v))
    | Num i -> Num i
    | Bool b -> Bool b
    | Unop(u, e) -> let u_e = num_extractor e in
                    (match u with
                     | Negate -> Num(~- u_e))
    | Binop(b, e1, e2) -> let b_e1, b_e2 = num_extractor e1, num_extractor e2 in 
                          (match b with
                           | Plus -> Num(b_e1 + b_e2)
                           | Minus -> Num(b_e1 - b_e2)
                           | Times -> Num(b_e1 * b_e2)
                           | Divide -> Num(b_e1 / b_e2)
                           | Mod -> Num(b_e1 mod b_e2)
                           | Equals -> Bool(b_e1 = b_e2)
                           | GreaterEqual -> Bool(b_e1 >= b_e2)
                           | LessEqual -> Bool(b_e1 <= b_e2)
                           | GreaterThan -> Bool(b_e1 > b_e2)
                           | LessThan -> Bool(b_e1 < b_e2))
    | Conditional(e1, e2, e3) -> if extract_bool (evaluator e1) then evaluator e2
                                 else evaluator e3
    | Fun(v, e) -> Fun(v, e)
    | Let(v, e1, e2) -> evaluator (subst v (evaluator e1) e2)
    | Letrec(v, e1, e2) -> let newval = Letrec(v, evaluator e1, Var v) in
                           let newsub = subst v newval (evaluator e1) in
                           evaluator (subst v newsub e2)
    | Raise -> raise EvalException
    | Unassigned -> raise (EvalError "Unassigned value")
    | App(e1, e2) -> let message = "Cannot apply " ^ exp_to_concrete_string e1
                                   ^ " to " ^ exp_to_concrete_string e2 in
                     (match evaluator e1 with
                      | Fun(vf, ef) -> evaluator (subst vf (evaluator e2) ef)
                      | _ -> raise (EvalError message)) in
    Env.Val(evaluator exp) ;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (exp : expr) (env : Env.env) : Env.value =

  (* Inner helper function to evaluate a 
     subexpression in the same environment *)
  let evaluator subexp = eval_d subexp env in

  (* Inner helper function to evaluate 
     and extract an int from a subexpression *)
  let num_extractor subexp = extract_num (extract_value (evaluator subexp)) in
  match exp with
  | Var v -> Env.lookup env v
  | Num i -> Env.Val(Num i)
  | Bool b -> Env.Val(Bool b)
  | Unop(u, e) -> let u_e = num_extractor e in
                  let u_res = (match u with
                               | Negate -> Num(~- u_e)) in
                  Env.Val(u_res)
  | Binop(b, e1, e2) -> let b_e1, b_e2 = num_extractor e1, num_extractor e2 in
                        let b_res = (match b with
                                     | Plus -> Num(b_e1 + b_e2)
                                     | Minus -> Num(b_e1 - b_e2)
                                     | Times -> Num(b_e1 * b_e2)
                                     | Divide -> Num(b_e1 / b_e2)
                                     | Mod -> Num(b_e1 mod b_e2)
                                     | Equals -> Bool(b_e1 = b_e2)
                                     | GreaterEqual -> Bool(b_e1 >= b_e2)
                                     | LessEqual -> Bool(b_e1 <= b_e2)
                                     | GreaterThan -> Bool(b_e1 > b_e2)
                                     | LessThan -> Bool(b_e1 < b_e2)) in
                        Env.Val(b_res)

  | Conditional(e1, e2, e3) -> let condition = extract_value (evaluator e1) in
                               if extract_bool condition then evaluator e2 
                               else evaluator e3
  | Fun(v, e) -> Env.Closure(Fun(v, e), env)
  | Let(v, e1, e2) -> let sublet = ref (evaluator e1) in
                      let newenv = Env.extend env v sublet in
                      Closure(extract_value (eval_d e2 newenv), newenv)
  | Letrec(v, e1, e2) -> let e_prime = Env.extend env v (ref (Env.Val(Unassigned))) in
                         let v_D = eval_d e1 e_prime in
                         let e_prime = Env.extend e_prime v (ref v_D) in
                         Closure(extract_value (eval_d e2 e_prime), e_prime)
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "Unassigned value")
  | App(e1, e2) -> (match extract_value (evaluator e1) with
                    | Fun(vf, ef) -> let subapp = ref (evaluator e2) in
                                     let newenv = Env.extend env vf subapp in
                                     Closure(extract_value (eval_d ef newenv), newenv)
                    | _ -> raise (EvalError ("Cannot apply " ^ exp_to_concrete_string e1 
                                            ^ " to " ^ exp_to_concrete_string e2)));;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  failwith "eval_l not implemented" ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, evaluate is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)
   
let evaluate = eval_s ;;

